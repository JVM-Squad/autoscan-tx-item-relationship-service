irs-helm:
  #####################
  # IRS Configuration #
  #####################
  irsUrl: "https://irs-test.dev.demo.catena-x.net"
  bpn: <path:traceability-irs/data/dev/irs#bpn>
  apiKeyAdmin: <path:traceability-irs/data/dev/irs#apiKeyAdmin>
  apiKeyRegular: <path:traceability-irs/data/dev/irs#apiKeyRegular>
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: "irs-test.dev.demo.catena-x.net"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - "irs-test.dev.demo.catena-x.net"
        secretName: tls-secret

  digitalTwinRegistry:
    url: https://irs-aas-registry.dev.demo.catena-x.net/semantics/registry/api/v3
    shellDescriptorTemplate: /shell-descriptors/{aasIdentifier}
    lookupShellsTemplate: /lookup/shells?assetIds={assetIds}
  discovery:
    discoveryFinderUrl: https://discovery-mock.dev.demo.catena-x.net/api/administration/connectors/discovery/search

  semanticshub:
    # url: https://semantics.int.demo.catena-x.net/hub/api/v1/models
    localModels:
      dXJuOmJhbW06aW8uY2F0ZW5heC5wYXJ0X2FzX3BsYW5uZWQ6Mi4wLjAjUGFydEFzUGxhbm5lZA: 
      dXJuOmJhbW06aW8uY2F0ZW5heC5zZXJpYWxfcGFydDoxLjAuMCNTZXJpYWxQYXJ0: 
  bpdm:
    url: https://partners-pool.int.demo.catena-x.net
  minioUser: <path:traceability-irs/data/dev/minio#minioUser>
  minioPassword: <path:traceability-irs/data/dev/minio#minioPassword>
  oauth2:
    clientTokenUri: <path:traceability-irs/data/dev/oauth2#tokenUri>
    semantics:
      clientId: <path:traceability-irs/data/oauth2/semantics#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/semantics#clientSecret>
    discovery:
      clientId: <path:traceability-irs/data/oauth2/discovery#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/discovery#clientSecret>
    bpdm:
      clientId: <path:traceability-irs/data/oauth2/bpdm#clientId>
      clientSecret: <path:traceability-irs/data/oauth2/bpdm#clientSecret>
  edc:
    submodel:
      request:
        ttl: PT2M
    controlplane:
      endpoint:
        data: "http://irs-dev-tractusx-connector-controlplane:8081/management"
      request:
        ttl: PT2M
      apikey:
        secret: <path:traceability-irs/data/dev/controlplane#apiKey>

  resources:
    limits:
      cpu: 1.5
      memory: 1.5Gi
    requests:
      cpu: 100m
      memory: 1.5Gi


  #######################
  # Minio Configuration #
  #######################
  minio:
    rootUser: <path:traceability-irs/data/dev/minio#minioUser>
    rootPassword: <path:traceability-irs/data/dev/minio#minioPassword>
    serviceAccount:
      name: "irs-test-dev-minio-sa"
