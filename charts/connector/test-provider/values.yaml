configuration:
  postgresuser: &postgresuser testuser
  postgrespass: &postgrespass testpass
  authorityBPN: &authorityBPN BPNL000000000000
  edcKey: &edcKey TEST

edc-provider:
  tractusx-connector:
    participant:
      id:
    controlplane:
      ssi:
        miw:
          url:
          authorityId:
        oauth:
          tokenurl:
          client:
            id:
            secretAlias:
      ingresses:
        - enabled: true
          hostname: "provider-controlplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - protocol
            - management
          tls:
            enabled: true
            secretName: tls-secret
      endpoints:
        management:
          authKey: *edcKey

    dataplane:
      ingresses:
        - enabled: true
          hostname: "provider-dataplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - public
          className: "nginx"
          tls:
            enabled: true
            secretName: tls-secret

    backendService:
      httpProxyTokenReceiverUrl: "https://submodelserver.test/data/endpoint-data-reference-provider1"

    vault:
      hashicorp:
        url:
        token:
        timeout: 30
        healthCheck:
          enabled: true
          standbyOk: true
        paths:
          secret:
          health:
      secretNames:
        transferProxyTokenSignerPrivateKey:
        transferProxyTokenSignerPublicKey:
        transferProxyTokenEncryptionAesKey:

    postgresql:
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-edc-postgresql-hl:5432/edc"
      auth:
        username: *postgresuser
        password: *postgrespass
      username: *postgresuser
      password: *postgrespass
  edc-postgresql:
    primary:
      persistence:
        enabled: false
      resources:
        requests:
          memory: 1Gi
          cpu: 250m
        limits:
          memory: 1Gi
          cpu: 1
    auth:
      database: edc
      username: *postgresuser
      postgresPassword: *postgrespass
      password: *postgrespass

digital-twin-registry:
  fullnameOverride: digital-twin-registry
  enablePostgres: true
  registry:
    host: digital-twin-registry.test
    ingress:
      enabled: true
      urlPrefix: /semantics/registry
      className: nginx
      annotations:
        cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        nginx.ingress.kubernetes.io/x-forwarded-prefix: /semantics/registry
    authentication: false
  postgresql:
    primary:
      persistence:
        enabled: false
        size: 1Gi
    auth:
      username: *postgresuser
      password: *postgrespass

  enableKeycloak: false

submodelservers:
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    hosts:
      - host: submodelserver.test
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - submodelserver.test
        secretName: tls-secret

tractusx-connector:
  fullnameOverride: edc-provider
  install:
    postgresql: false
    vault: true
  participant:
    id: DATAPROVIDER_1

  controlplane:
    # SSI configuration
    ssi:
      miw:
        url: http://provider-managed-identity-wallet:8080
        authorityId: *authorityBPN
      oauth:
        tokenurl: <path:traceability-irs/data/dev/controlplane#ssi.oauth.tokenurl>
        client:
          id: admin
          secretAlias: edc-test-miw-keycloak-secret
    ingresses:
      - enabled: true
        hostname: "edc-control.test"
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - protocol
          - management
        tls:
          enabled: true
          secretName: tls-secret

    endpoints:
      management:
        # -- authentication key, must be attached to each 'X-Api-Key' request header
        authKey: TEST
  dataplane:
    ingresses:
      - enabled: true
        hostname: "edc-data.test"
        annotations:
          nginx.ingress.kubernetes.io/ssl-passthrough: "false"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        endpoints:
          - public
        tls:
          enabled: true
          secretName: tls-secret

  backendService:
    httpProxyTokenReceiverUrl: "http://test"

    # Files system has to be set to writeable for now since controlplane relies on temporary files to write SSI related things to
    securityContext:
      readOnlyRootFilesystem: false
  vault:
    server:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
        ingressClassName: nginx
        hosts:
          - host: edc.vault.test
    hashicorp:
      token: "root"
    secretNames:
      transferProxyTokenSignerPrivateKey:
      transferProxyTokenSignerPublicKey:
      transferProxyTokenEncryptionAesKey:

  postgresql:
    enabled: false
    auth:
      username: *postgresuser
      password: *postgrespass
    username: *postgresuser
    password: *postgrespass
    jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-edc-postgresql:5432/edc"

edc-postgresql:
  auth:
    database: "edc"
    username: *postgresuser
    password: *postgrespass
  username: *postgresuser
  password: *postgrespass
  primary:
    persistence:
      enabled: false

managed-identity-wallet:
  miw:
    authorityWallet:
      name: "AuthorityWallet"
      bpn: *authorityBPN
  keycloak:
    enabled: false
    auth:
      adminUser: admin
      adminPassword: admin
  postgresql:
    auth:
      password: ""
      database: "miw_app"
