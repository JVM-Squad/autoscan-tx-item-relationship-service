# #############################################################################
# Copyright (c) 2022,2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
# Copyright (c) 2021,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################

dataconsumer:
  enabled: true
  seedTestdata: false
  fullnameOverride: dataconsumer
  tractusx-connector:
    fullnameOverride: dataconsumer-edc
    nameOverride: dataconsumer-edc
    participant:
      id:
    controlplane:
      ssi:
        miw:
          url:
          authorityId:
        oauth:
          tokenurl:
          client:
            id:
            secretAlias:
      endpoints:
        management:
          authKey: TEST1
      ingresses:
        - enabled: true
          hostname: "dataconsumer-controlplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - protocol
            - management
          tls:
            enabled: true
            secretName: tls-secret
    dataplane:
      ingresses:
        - enabled: true
          hostname: "dataconsumer-dataplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - public
          className: "nginx"
          tls:
            enabled: true
            secretName: tls-secret
    postgresql:
      jdbcUrl: "jdbc:postgresql://dataconsumer-db:5432/edc"
    vault:
      hashicorp:
        url:
        token:
        paths:
          secret:
          health:
      secretNames:
        transferProxyTokenSignerPrivateKey:
        transferProxyTokenSignerPublicKey:
        transferProxyTokenEncryptionAesKey:

  postgresql:
    fullnameOverride: dataconsumer-db
    nameOverride: dataconsumer-db

  digital-twin-registry:
    enabled: false
    fullnameOverride: dataconsumer-digital-twin-registry
    nameOverride: dataconsumer-digital-twin-registry
    postgresql:
      fullnameOverride: dataconsumer-digital-twin-registry-db
      nameOverride: dataconsumer-digital-twin-registry-db
      auth:
        existingSecret: dataconsumer-secret-dtr-postgres-init
    registry:
      host: dataconsumer-digital-twin-registry.test

  submodelservers:
    enabled: false
    fullnameOverride: dataconsumer-submodelserver
    nameOverride: dataconsumer-submodelserver
    ingress:
      enabled: true
      hosts:
        - host: dataconsumer-submodelserver.test
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - dataconsumer-submodelserver.test
          secretName: tls-secret

dataprovider:
  enabled: true
  fullnameOverride: dataprovider
  tractusx-connector:
    fullnameOverride: dataprovider-edc
    nameOverride: dataprovider-edc
    participant:
      id:
    controlplane:
      ssi:
        miw:
          url:
          authorityId:
        oauth:
          tokenurl:
          client:
            id:
            secretAlias:
      endpoints:
        management:
          authKey: TEST2
      ingresses:
        - enabled: true
          hostname: "dataprovider-controlplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - protocol
            - management
          tls:
            enabled: true
            secretName: tls-secret
    dataplane:
      ingresses:
        - enabled: true
          hostname: "dataprovider-dataplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - public
          className: "nginx"
          tls:
            enabled: true
            secretName: tls-secret
    postgresql:
      jdbcUrl: "jdbc:postgresql://dataprovider-db:5432/edc"
    vault:
      hashicorp:
        url:
        token:
        paths:
          secret:
          health:
      secretNames:
        transferProxyTokenSignerPrivateKey:
        transferProxyTokenSignerPublicKey:
        transferProxyTokenEncryptionAesKey:
  postgresql:
    fullnameOverride: dataprovider-db
    nameOverride: dataprovider-db

  digital-twin-registry:
    fullnameOverride: dataprovider-digital-twin-registry
    nameOverride: dataprovider-digital-twin-registry
    postgresql:
      fullnameOverride: dataprovider-digital-twin-registry-db
      nameOverride: dataprovider-digital-twin-registry-db
      auth:
        existingSecret: dataprovider-secret-dtr-postgres-init
    registry:
      host: dataprovider-digital-twin-registry.test

  submodelservers:
    fullnameOverride: dataprovider-submodelserver
    nameOverride: dataprovider-submodelserver
    ingress:
      enabled: true
      hosts:
        - host: dataprovider-submodelserver.test
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - dataprovider-submodelserver.test
          secretName: tls-secret

dataprovider2:
  enabled: true
  fullnameOverride: dataprovider2
  tractusx-connector:
    fullnameOverride: dataprovider2-edc
    nameOverride: dataprovider2-edc
    participant:
      id:
    controlplane:
      ssi:
        miw:
          url:
          authorityId:
        oauth:
          tokenurl:
          client:
            id:
            secretAlias:
      endpoints:
        management:
          authKey: TEST3
      ingresses:
        - enabled: true
          hostname: "dataprovider2-controlplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - protocol
            - management
          tls:
            enabled: true
            secretName: tls-secret
    dataplane:
      ingresses:
        - enabled: true
          hostname: "dataprovider2-dataplane.test"
          annotations:
            nginx.ingress.kubernetes.io/ssl-passthrough: "false"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          endpoints:
            - public
          className: "nginx"
          tls:
            enabled: true
            secretName: tls-secret
    postgresql:
      jdbcUrl: "jdbc:postgresql://dataprovider2-db:5432/edc"
    vault:
      hashicorp:
        url:
        token:
        paths:
          secret:
          health:
      secretNames:
        transferProxyTokenSignerPrivateKey:
        transferProxyTokenSignerPublicKey:
        transferProxyTokenEncryptionAesKey:

  postgresql:
    fullnameOverride: dataprovider2-db
    nameOverride: dataprovider2-db

  digital-twin-registry:
    fullnameOverride: dataprovider2-digital-twin-registry
    nameOverride: dataprovider2-digital-twin-registry
    postgresql:
      fullnameOverride: dataprovider2-digital-twin-registry-db
      nameOverride: dataprovider2-digital-twin-registry-db
      auth:
        existingSecret: dataprovider2-secret-dtr-postgres-init
    registry:
      host: dataprovider2-digital-twin-registry.test

  submodelservers:
    fullnameOverride: dataprovider2-submodelserver
    nameOverride: dataprovider2-submodelserver
    ingress:
      enabled: true
      hosts:
        - host: dataprovider2-submodelserver.test
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - dataprovider2-submodelserver.test
          secretName: tls-secret
